export cmd_caller='eval echo 1>&2 $( caller )'

indicator() 
{ 
    local res_last=${1:-$?};
    local num="${1:-$res_last}";
    if [ $num -eq 0 ]; then
        trace -------- ok;
    else
        trace -------- error;
    fi;
    return $num
}


broadcast(){
 #commander "assert left_bigger $# 1"
local arg0=$1
local opts="${@:1}"

toilet --gay "$arg0"
cowsay "$opts"
}

trace(){
echo 1>&2  "${@:-}"
}

exiting(){
local num=${1:-1}
echo 1>&2 "CALLER(2): $(caller 2)"
echo 1>&2 "CALLER(3): $(caller 3)"
trace "exiting $num"
cat1 /tmp/err
exit $num
}
commander(){ 
local args=($@)
local cmd="${args[@]}"
trace  "[commander] $cmd"
eval "$cmd" || { exiting 1; }
#indicator
}
mute(){ 
local args=($@)
local cmd="${args[@]}"
trace  "[mute] $cmd"
eval "$cmd" 1>/tmp/out 2>/tmp/err || { exiting 1; }
}

ensure(){ 
$cmd_caller
local args=($@)
local cmd="${args[@]}"
trace  "[ensure] $cmd"
eval "$cmd"  || { exiting 1; }
}

cat1(){
trace $FUNCNAME 
local file=$1
trace "[file] $file"
test -f $file && { cat -n $file; } || true
}

export -f exiting
export -f cat1
export -f ensure 
export -f commander 
export -f mute 
export -f trace
export -f broadcast
export -f indicator
